# Default values for fastapiapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# Default values for fastapiapp.
fastapiapp:
  service:
    port: 8083              # Le port externe exposé par le service
    targetPort: 8083        # Le port interne dans le conteneur (doit être le même que containerPort)
    containerPort: 8083     # Le port sur lequel l'application dans le conteneur écoute


# Declare variables to be passed into your templates.

# Configuration pour l'application castDb
# Configuration pour l'application castDb
# Configuration pour l'application castDb
castDb:
  serviceName: cast-db
  appLabel: cast-db
  servicePort: 5432
  targetPort: 5432
  serviceType: ClusterIP

  deploymentName: cast-db
  replicas: 1
  containerName: cast-db
  image: postgres:12.1-alpine
  containerPort: 5432
  volumeMountPath: /var/lib/postgresql/data
  volumeName: cast-db-data
  persistentVolumeClaim: cast-db-pvc
  pvc:
    claimName: cast-db-pvc
    size: 1Gi

  configMapName: cast-db-config
  postgresUser: cast_db_username
  postgresPassword: cast_db_password
  postgresDb: cast_db_dev

# Configuration pour l'application castService
castService:
  configMapName: cast-service-config
  postgresUser: cast_db_username
  postgresPassword: cast_db_password
  postgresDb: cast_db_dev
  dbHost: cast-db  # Nom d'hôte de la base de données (le nom du service ou du pod)
  serviceHostUrl: "http://cast-service:8000/"
  serviceName: cast-service
  image: julh62/jenkins-devops-exams-cast-service:latest
  appLabel: cast-service
  servicePort: 8000
  containerPort: 8000
  targetPort: 8000
  ingressName: cast-service-ingress  # Nom de l'Ingress spécifique 
  ingressHost: jhennebo.be           # Nom d'hôte pour cast-service
  ingressPath: /api/v1/casts/       # Chemin pour cast-service
  serviceType: ClusterIP



# Configuration pour l'application movieDb
movieDb:
  serviceName: movie-db
  appLabel: movie-db
  servicePort: 5432
  targetPort: 5432
  serviceType: ClusterIP

  deploymentName: movie-db
  replicas: 1
  containerName: movie-db
  image: postgres:12.1-alpine
  containerPort: 5432
  volumeMountPath: /var/lib/postgresql/data
  volumeName: movie-db-data
  persistentVolumeClaim: movie-db-pvc
  pvc:
    claimName: movie-db-pvc
    size: 1Gi

  configMapName: movie-db-config
  postgresUser: movie_db_username
  postgresPassword: movie_db_password
  postgresDb: movie_db_dev
  
  

# Configuration pour le service movieService
movieService:
  serviceName: movie-service
  appLabel: movie-service
  replicas: 1
  containerName: movie-service
  image: julh62/jenkins-devops-exams-movie-service:latest
  containerPort: 8000
  configMapName: movie-service-config  # Nom du ConfigMap utilisé pour l'environnement
  postgresUser: movie_db_username
  postgresPassword: movie_db_password
  postgresDb: movie_db_dev
  dbHost: movie-db  # Nom d'hôte de la base de données (le nom du service ou du pod)
  serviceHostUrl: "http://movie-service:8000/"
  servicePort: 8000   

# Configuration pour l'Ingress
  ingressName: movie-service-ingress  # Nom de l'Ingress
  ingressHost: jhennebo.be            # Nom d'hôte dynamique
  ingressPath: /api/v1/movies/       # Chemin dynamique
  serviceName: movie-service         # Nom du service backend
  servicePort: 8000                  # Port du service
  targetPort: 8000

#configuration nginx
nginx:
  deploymentName: nginx                # Nom du déploiement
  serviceName: nginx
  appLabel: nginx                      # Label utilisé pour le déploiement
  replicas: 1                          # Nombre de répliques
  image: nginx:latest                  # Image Docker utilisée
  containerPort: 8081                  # Port interne du conteneur
  configMapName: nginx-config          # Nom du ConfigMap monté comme volume
  servicePort: 8081                   # Port externe du service
  serviceType: NodePort


serviceAccount:
  create: false
  name: default


# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


